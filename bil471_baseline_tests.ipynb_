{"cells":[{"cell_type":"markdown","metadata":{"id":"dPnkZMo5935v"},"source":["IMPORTS"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2314,"status":"ok","timestamp":1682966875569,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"J1PIIUdixMbw","outputId":"a5ca6ea1-123c-4bed-e993-0890679f3020"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["# Connect with drive\n","from google.colab import drive\n","\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1940,"status":"ok","timestamp":1682966877504,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"NxyTxSV3-ZQO","outputId":"0b5b7744-1dfb-4cd9-c6fd-04eb74b404c2"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":2}],"source":["# Import and download necessary language models\n","from gensim.models.doc2vec import Doc2Vec, TaggedDocument\n","from nltk.tokenize import sent_tokenize, word_tokenize\n","import nltk\n","\n","nltk.download('punkt')\n","nltk.download(\"stopwords\")"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":2198,"status":"ok","timestamp":1682966879696,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"ATzcZWkOxOK2"},"outputs":[],"source":["# Import and check operations for tensorflow\n","import tensorflow as tf\n","#!pip install tf-nightly\n","\n","# %tensorflow_version 2.x\n","# device_name = tf.test.gpu_device_name()\n","# if device_name != '/device:GPU:0':\n","#   raise SystemError('GPU device not found')\n","# print('Found GPU at: {}'.format(device_name))\n","# tf.device('/device:GPU:0')"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1682966879697,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"VeRxUYl4xa-i"},"outputs":[],"source":["import pickle\n","import numpy as np\n","\n","#Setting the seeds\n","lucky_number = 42\n","np.random.seed(lucky_number)\n","tf.random.set_seed(lucky_number)"]},{"cell_type":"markdown","metadata":{"id":"kUPV_11RnEsG"},"source":["GETTING THE BASELINE WIKI727K DATASET"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":327,"status":"ok","timestamp":1682966880015,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"In43wfYjnJsC"},"outputs":[],"source":["!cp \"/content/drive/MyDrive/NLP/Baseline/wiki_727.zip\"  \"/content/\""]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":55416,"status":"ok","timestamp":1682966935428,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"DgxlggosnZk3","colab":{"base_uri":"https://localhost:8080/"},"outputId":"cc779d0f-9585-4125-c388-8be1f3f97362"},"outputs":[{"output_type":"stream","name":"stdout","text":["replace /content/wiki_727/dev/00/00/01/12? [y]es, [n]o, [A]ll, [N]one, [r]ename: "]}],"source":["!unzip -q \"/content/wiki_727.zip\" -d \"/content/\""]},{"cell_type":"markdown","metadata":{"id":"Tk1F9j5YZvYD"},"source":["GETTING SENTENCE EMBEDDING MODEL"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":676,"status":"ok","timestamp":1682966946791,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"IXNG1Lu9Zu6z"},"outputs":[],"source":["#todo bu fileyi ekle githuba\n","embedding_size = 64\n","sentence_embedding_model = Doc2Vec.load(\"/content/drive/MyDrive/NLP/Baseline/wiki727k_embeddings\")"]},{"cell_type":"markdown","source":["OBTAINING THE ALREADY PREPROCESSED DATA (If the data is not preprocessed, run the cells below.)"],"metadata":{"id":"uiEjBrXbpfkD"}},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":14829,"status":"ok","timestamp":1682966965622,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"LEEgztSXSxS4"},"outputs":[],"source":["##IF DATA ARE ALREADY PREPROCESSED\n","##RUN THIS BLOCK\n","results_train = None\n","results_dev  = None\n","results_test = None\n","\n","train_Y = None\n","validation_Y = None\n","test_Y = None\n","\n","with open('/content/drive/MyDrive/NLP/Baseline/DatasRedyForTraining/trainX.pkl', 'rb') as f:\n","  results_train = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/DatasRedyForTraining/devX.pkl', 'rb') as f:\n","  results_dev = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/DatasRedyForTraining/testX.pkl', 'rb') as f:\n","  results_test = pickle.load(f)\n","\n","\n","with open('/content/drive/MyDrive/NLP/Baseline/train_y.pkl', 'rb') as f:\n","  train_Y = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/dev_y.pkl', 'rb') as f:\n","  validation_Y = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/test_y.pkl', 'rb') as f:\n","  test_Y = pickle.load(f)\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"7SxFtIWQ98qm"},"source":["DATA & PREPROCESSING FOR THE BASELINE DATASET\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jYcRD3bUnb_O"},"outputs":[],"source":["## ELSE RUN THIS BLOCKS\n","# Read the data\n","import re\n","import os\n","\n","trainRootPath = \"/content/wiki_727/train\"\n","devRootPath = \"/content/wiki_727/dev\"\n","testRootPath = \"/content/wiki_727/test\"\n","\n","sub_dirs_train = [x[0] for x in os.walk(trainRootPath)]\n","sub_dirs_dev =[x[0] for x in os.walk(devRootPath)]\n","sub_dirs_test =[x[0] for x in os.walk(testRootPath)]\n","\n","print(\"Required folders are obtained.\")\n","\n","\n","def get_all_text_in_folder(subdirs):\n","    all_text = \"\"\n","    for folder in subdirs:\n","        print(\"folder {}\", folder)\n","        for file in os.listdir(folder):\n","            current = os.path.join(folder,file)\n","            if os.path.isdir(current):\n","                continue\n","            with open(current, \"r\") as f:\n","                all_text = all_text + \"\".join(f.readlines())\n","        print(\"Folder {} is completed\", folder)\n","\n","    return all_text.lower()\n","\n","\n","all_text_train = get_all_text_in_folder(sub_dirs_train)\n","all_text_dev = get_all_text_in_folder(sub_dirs_dev)\n","all_text_test = get_all_text_in_folder(sub_dirs_test)\n","\n","print(\"Texts are obtained.\")\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"executionInfo":{"elapsed":3643,"status":"ok","timestamp":1682867378914,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"Amekp006tjz0","outputId":"ae69293b-c1be-40e7-af93-cfcc23033d04"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'th often many located around the massive infield.\\nthey were not sponsored by the track, and at times, the track management would attempt to curtail the practice, with safety in mind.\\nhowever, enforcement was inconsistent, and they were not banned outright prior to 1960.\\nduring the parade lap as the field drove by, the people on the platform began to lean and wave at the cars, which caused the scaffolding to become unstable.\\nit soon tipped forward and fell to the ground, crushing people who were underneath the structure, and the 125â€“130 people who were on it either fell or jumped to the ground.\\nlinder and craig were pronounced dead of broken necks, and over 80 were injured, about 22 seriously.\\nafter the accident, the speedway banned \"bootleg\" homemade scaffolds at the track, a rule that still exists to this day.\\nthe track management was scrutinized by the state fire marshal and other officials for allowing the scaffolds to be constructed without permits, inspections, or any sort of safe'"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["# Preprocessing\n","# Remove the html tags\n","all_text_train = re.sub(\"<doc.*>\", \"\", all_text_train)\n","all_text_train = re.sub(\"</doc>\", \"\", all_text_train)\n","\n","all_text_dev = re.sub(\"<doc.*>\", \"\", all_text_dev)\n","all_text_dev = re.sub(\"</doc>\", \"\", all_text_dev)\n","\n","all_text_test = re.sub(\"<doc.*>\", \"\", all_text_test)\n","all_text_test = re.sub(\"</doc>\", \"\", all_text_test)\n","\n","# Tag the paragraphs, in order to create Y labels later\n","all_text_train = re.sub(\"====(=)+\", \"<p>\", all_text_train)\n","\n","all_text_dev = re.sub(\"====(=)+\", \"<p>\", all_text_dev)\n","\n","all_text_test = re.sub(\"====(=)+\", \"<p>\", all_text_test)\n","\n","all_text_train[5000:6000]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":111712,"status":"ok","timestamp":1682867598602,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"RbYXEQnBpFV-","outputId":"527a301b-8844-437a-bfba-c66c3a1c6e58"},"outputs":[{"data":{"text/plain":["['<p>,1,preface.',\n"," 'the 44th international 500-mile sweepstakes was held at the indianapolis motor speedway in speedway, indiana on monday, may 30, 1960.\\nthe event was part of the 1960 usac national championship trail and was also race 3 of 10 in the 1960 world championship of drivers.',\n"," 'it would be the final time world championship points would be awarded at the indy 500.\\noften regarded as the greatest two-man duel in indianapolis 500 history, the 1960 race saw a then-record 29 lead changes (a record that stood until 2012).',\n"," 'jim rathmann and rodger ward battled out nearly the entire second half.',\n"," 'rathmann took the lead for good on lap 197 after ward was forced to slow down with a worn out tire.',\n"," \"rathmann's margin of victory of 12.75 seconds was the second-closest finish in indy history at the time.\",\n"," 'the inaugural 500 festival open invitation was held at the speedway golf course in the four days leading up to the race.',\n"," '<p>,2,time trials.',\n"," 'time trials was scheduled for four days, but the third day was rained out.',\n"," '***list***.']"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["# Split the text into sentences\n","train_sent_tokenized = sent_tokenize(all_text_train)\n","dev_sent_tokenized = sent_tokenize(all_text_dev)\n","test_sent_tokenized = sent_tokenize(all_text_test)\n","\n","train_sent_tokenized[:10]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3416,"status":"ok","timestamp":1682868608914,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"E_Tmmn5JrX3q","outputId":"a67136f6-458c-480f-a68b-6dd030a5beb9"},"outputs":[{"name":"stdout","output_type":"stream","text":["Labels in the train set: {} Counter({0: 2606367, 1: 10895})\n"]}],"source":["# Creating the Y labels by utilizing the paragraph tags (<p>.)\n","# And removing the paragraph tags to obtain the original sentences back again\n","import collections\n","\n","def create_y_for_set(set_partition):\n","  Y = []\n","  for i in range(len(set_partition)):\n","    if \"<p>\" in set_partition[i]:\n","      set_partition[i] = set_partition[i][3:]\n","      Y.append(1)\n","    else:\n","      Y.append(0)\n","  return Y\n","\n","\n","y_train = create_y_for_set(train_sent_tokenized)\n","y_dev = create_y_for_set(dev_sent_tokenized)\n","y_test = create_y_for_set(test_sent_tokenized)\n","\n","counter_train = collections.Counter(y_train)\n","print(\"Labels in the train set: {}\",counter_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rWTNkjDSAXb5"},"outputs":[],"source":["# Further preprocessing...\n","\n","def further_preprocess_set(set_partition):\n","  for i in range(len(set_partition)):\n","    # Convert to all lowercase\n","    set_partition[i] = set_partition[i].lower()\n","    # Removing punctuation\n","    set_partition[i] = re.sub('[^\\w\\s]', '', set_partition[i])\n","\n","\n","further_preprocess_set(train_sent_tokenized)\n","further_preprocess_set(dev_sent_tokenized)\n","further_preprocess_set(test_sent_tokenized)\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ikv6IDnl-IPj"},"source":["GETTING THE TRAINED SENTENCE EMBEDDING"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y62vcrxk5hiX"},"outputs":[],"source":["### IF\n","# Read the embedding data if already written before\n","train_X = []\n","validation_X = []\n","test_X = []\n","with open('/content/drive/MyDrive/NLP/Baseline/train_X.pkl', 'rb') as f:\n","  train_X = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/validation_X.pkl', 'rb') as f:\n","  validation_X = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/test_X.pkl', 'rb') as f:\n","  test_X = pickle.load(f)\n","\n","train_Y = []\n","validation_Y = []\n","test_Y = []\n","with open('/content/drive/MyDrive/NLP/Baseline/train_Y.pkl', 'rb') as f:\n","  train_Y = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/validation_Y.pkl', 'rb') as f:\n","  validation_Y = pickle.load(f)\n","with open('/content/drive/MyDrive/NLP/Baseline/test_Y.pkl', 'rb') as f:\n","  test_Y = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":67,"referenced_widgets":["dca23dc11d3b438cb24d1180c0650499","084980ff4a9f4e9d8a274b0d2df69954","337bf7718632403b9fa1bf81da06c424","c2286500dad640a4b8aa2e9c3a8cc7b5","e53595a6db3445719887cc7ffbe022eb","7c3fb068c333479ea64623b2d46b5a36","5e52523a68c0427cb226ea602974d2e4","db7996e725d64e119e2a64bb9cf6610a","f5646b547dcc47d6af48a91a76bf52f3","d51477c3d0fc49278aaab65192e54b49","80ba7dc2f3e94f36aa57f7f95768fe47"]},"executionInfo":{"elapsed":51230,"status":"ok","timestamp":1682870520999,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"6qelWyafDdHU","outputId":"8f9e74af-937e-4ff7-e50f-718374378655"},"outputs":[{"name":"stdout","output_type":"stream","text":["Multi time: {} 17.866308450698853\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"dca23dc11d3b438cb24d1180c0650499","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/10000 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"}],"source":["### ELSE\n","# Using the embeddings of the sentences and creating the train, validation and test data of X\n","import time\n","train_X = []\n","validation_X = []\n","test_X = []\n","\n","\n","from tqdm.notebook import tqdm\n","\n","for i in tqdm(range(len(train_sent_tokenized[:10000]))):\n","  train_X.append(sentence_embedding_model.infer_vector(word_tokenize(train_sent_tokenized[i])))\n","for i in range(len(dev_sent_tokenized)):\n","  validation_X.append(sentence_embedding_model.infer_vector(word_tokenize(dev_sent_tokenized[i])))\n","for i in range(len(test_sent_tokenized)):\n","  test_X.append(sentence_embedding_model.infer_vector(word_tokenize(test_sent_tokenized[i])))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Yn7v77VC1IUJ"},"outputs":[],"source":["### ELSE CONT.\n","# Write the founded embedding dataset so that you can use it later\n","with open('/content/drive/MyDrive/NLP/train_X.pkl', 'wb') as f:\n","  pickle.dump(train_X, f)\n","\n","with open('/content/drive/MyDrive/NLP/validation_X.pkl', 'wb') as f:\n","  pickle.dump(validation_X, f)\n","  \n","with open('/content/drive/MyDrive/NLP/test_X.pkl', 'wb') as f:\n","  pickle.dump(test_X, f)\n","\n","with open('/content/drive/MyDrive/NLP/train_Y.pkl', 'wb') as f:\n","  pickle.dump(train_Y, f)\n","\n","with open('/content/drive/MyDrive/NLP/validation_Y.pkl', 'wb') as f:\n","  pickle.dump(validation_Y, f)\n","  \n","with open('/content/drive/MyDrive/NLP/test_Y.pkl', 'wb') as f:\n","  pickle.dump(test_Y, f)"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":1198,"status":"ok","timestamp":1682967116685,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"TZIvAYmsW_JG"},"outputs":[],"source":["\n","train_X = results_train\n","validation_X = results_dev\n","test_X = results_test\n"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":9025,"status":"ok","timestamp":1682967126220,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"zbPO1lkmFcDa"},"outputs":[],"source":["# Creating bi-gram (sentence-wise) data for model 0\n","train_X_bi = []\n","validation_X_bi = []\n","test_X_bi = []\n","for i in range(len(train_X)-1):\n","  train_X_bi.append(np.concatenate((train_X[i], train_X[i+1])))\n","for i in range(len(validation_X)-1):\n","  validation_X_bi.append(np.concatenate((validation_X[i], validation_X[i+1])))\n","for i in range(len(test_X)-1):\n","  test_X_bi.append(np.concatenate((test_X[i], test_X[i+1])))\n","\n","train_Y_bi = train_Y[:-1]\n","validation_Y_bi = validation_Y[:-1]\n","test_Y_bi = test_Y[:-1]"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":2397,"status":"ok","timestamp":1682967128615,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"n8SR2lYD28uU"},"outputs":[],"source":["# Converting them to numpy arrays\n","\n","#train_X = np.array(train_X, dtype=np.float32)\n","#validation_X = np.array(validation_X, dtype=np.float32)\n","#test_X = np.array(test_X, dtype=np.float32)\n","\n","train_X_bi = np.array(train_X_bi, dtype=np.float32)\n","validation_X_bi = np.array(validation_X_bi, dtype=np.float32)\n","test_X_bi = np.array(test_X_bi, dtype=np.float32)\n","\n","#train_Y = np.array(train_Y, dtype=np.float32)\n","#validation_Y = np.array(validation_Y, dtype=np.float32)\n","#test_Y = np.array(test_Y, dtype=np.float32)\n","\n","train_Y_bi = np.array(train_Y_bi, dtype=np.float32)\n","validation_Y_bi = np.array(validation_Y_bi, dtype=np.float32)\n","test_Y_bi = np.array(test_Y_bi, dtype=np.float32)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":269,"status":"ok","timestamp":1682946017023,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"e9tUX3XVLFfD","outputId":"be7f8fc0-c62f-4172-e818-9ae59d1e65a3"},"outputs":[{"data":{"text/plain":["(2617261, 128)"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["train_X_bi.shape"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":510,"status":"ok","timestamp":1682967129122,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"0N8P-5pQpikH"},"outputs":[],"source":["##HANDLING THE UNEVEN CLASS LABELS\n","from sklearn.utils import class_weight\n","\n","class_weights = class_weight.compute_class_weight(class_weight='balanced', classes= np.unique(train_Y_bi), y=train_Y_bi)\n"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1682967129123,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"V2gCpT6awEAp"},"outputs":[],"source":["dict_class_weights = {0: float(class_weights[0]), 1: float(class_weights[1])}"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kVDoYRhBveX1","executionInfo":{"status":"ok","timestamp":1682971395878,"user_tz":-180,"elapsed":3602235,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"}},"outputId":"40d1f174-45ec-4462-dc12-14c8de09a2d6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_6 (Dense)             (None, 10)                1290      \n","                                                                 \n"," batch_normalization_4 (Bat  (None, 10)                40        \n"," chNormalization)                                                \n","                                                                 \n"," dropout_2 (Dropout)         (None, 10)                0         \n","                                                                 \n"," dense_7 (Dense)             (None, 4)                 44        \n","                                                                 \n"," batch_normalization_5 (Bat  (None, 4)                 16        \n"," chNormalization)                                                \n","                                                                 \n"," dense_8 (Dense)             (None, 1)                 5         \n","                                                                 \n","=================================================================\n","Total params: 1395 (5.45 KB)\n","Trainable params: 1367 (5.34 KB)\n","Non-trainable params: 28 (112.00 Byte)\n","_________________________________________________________________\n","Epoch 1/7\n","40895/40895 [==============================] - 513s 12ms/step - loss: 1.7364 - accuracy: 0.4828 - f1_score: 0.0083 - precision_2: 0.0042 - recall_2: 0.5168 - val_loss: 1.5668 - val_accuracy: 0.0025 - val_f1_score: 0.0049 - val_precision_2: 0.0025 - val_recall_2: 1.0000\n","Epoch 2/7\n","40895/40895 [==============================] - 516s 13ms/step - loss: 1.1193 - accuracy: 0.4751 - f1_score: 0.0083 - precision_2: 0.0041 - recall_2: 0.5144 - val_loss: 2.2785 - val_accuracy: 0.0025 - val_f1_score: 0.0049 - val_precision_2: 0.0025 - val_recall_2: 1.0000\n","Epoch 3/7\n","40895/40895 [==============================] - 511s 13ms/step - loss: 1.1115 - accuracy: 0.4745 - f1_score: 0.0083 - precision_2: 0.0042 - recall_2: 0.5248 - val_loss: 0.0267 - val_accuracy: 0.9975 - val_f1_score: 0.0049 - val_precision_2: 0.0000e+00 - val_recall_2: 0.0000e+00\n","Epoch 4/7\n","40895/40895 [==============================] - 505s 12ms/step - loss: 1.1645 - accuracy: 0.4729 - f1_score: 0.0083 - precision_2: 0.0041 - recall_2: 0.5184 - val_loss: 0.6477 - val_accuracy: 0.9975 - val_f1_score: 0.0049 - val_precision_2: 0.0000e+00 - val_recall_2: 0.0000e+00\n","Epoch 5/7\n","40895/40895 [==============================] - 528s 13ms/step - loss: 1.1496 - accuracy: 0.4785 - f1_score: 0.0083 - precision_2: 0.0041 - recall_2: 0.5200 - val_loss: 1.1644 - val_accuracy: 0.0025 - val_f1_score: 0.0049 - val_precision_2: 0.0025 - val_recall_2: 1.0000\n","Epoch 6/7\n","40895/40895 [==============================] - 519s 13ms/step - loss: 1.1447 - accuracy: 0.4758 - f1_score: 0.0083 - precision_2: 0.0041 - recall_2: 0.5226 - val_loss: 1.8526 - val_accuracy: 0.0025 - val_f1_score: 0.0049 - val_precision_2: 0.0025 - val_recall_2: 1.0000\n","Epoch 7/7\n","40895/40895 [==============================] - 504s 12ms/step - loss: 1.1317 - accuracy: 0.4733 - f1_score: 0.0083 - precision_2: 0.0042 - recall_2: 0.5336 - val_loss: 0.9762 - val_accuracy: 0.0025 - val_f1_score: 0.0049 - val_precision_2: 0.0025 - val_recall_2: 1.0000\n"]}],"source":["import datetime\n","now = datetime.datetime.now()\n","\n","# The Model\n","MODEL_NO = 0\n","\n","log_dir = \"/content/fit/\"+str(now.minute)\n","tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n","\n","if MODEL_NO == 0: # Simple Dense Model\n","  model = tf.keras.models.Sequential([\n","      tf.keras.layers.InputLayer(input_shape=(embedding_size*2,)),\n","      tf.keras.layers.Dense(10, activation='relu'),\n","      tf.keras.layers.BatchNormalization(),\n","      tf.keras.layers.Dropout(0.5),\n","      tf.keras.layers.Dense(4, activation='relu'),\n","      tf.keras.layers.BatchNormalization(),\n","      tf.keras.layers.Dense(1, activation='sigmoid')\n","  ])\n","  optimizer = tf.keras.optimizers.Adam(learning_rate=5e-1)\n","  model.summary()\n","  model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy',tf.keras.metrics.F1Score(), tf.keras.metrics.Precision(), tf.keras.metrics.Recall()])\n","  history = model.fit(x=train_X_bi,\n","                      y=train_Y_bi,\n","                      batch_size=64,\n","                      epochs=7,\n","                      validation_data=(validation_X_bi, validation_Y_bi),\n","                      verbose=1,\n","                      class_weight=dict_class_weights)\n","\n","elif MODEL_NO == 1: # Recurrent model # This enables the model to look further past than only 2 sentences\n","  model = tf.keras.models.Sequential([\n","    tf.keras.layers.InputLayer(input_shape=(1,embedding_size)),\n","    tf.keras.layers.GRU(16, return_sequences=True),\n","    tf.keras.layers.GRU(16),\n","    tf.keras.layers.Dense(10, activation='relu'),\n","    tf.keras.layers.Dense(4, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","  ])\n","  optimizer = tf.keras.optimizers.Adam(learning_rate=3e-3)\n","  model.summary()\n","  model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy','f1_score'])\n","  model.fit(x=train_X, y=train_Y, batch_size=64, epochs=4, validation_data=(validation_X, validation_Y), verbose=1)"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":1417,"status":"ok","timestamp":1682971507388,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"PKzxywm6w8t_"},"outputs":[],"source":["# Saving the model\n","\n","import datetime\n","now = datetime.datetime.now()\n","\n","model.save('/content/drive/MyDrive/NLP/Baseline/nlp_' + str(MODEL_NO) + \" \"+str(now.hour)+\" \"+ str(now.minute) +'_type_model')"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":150440,"status":"ok","timestamp":1682971673948,"user":{"displayName":"Mehmet Eren BULUT","userId":"11841433734087933125"},"user_tz":-180},"id":"Zqq-VYO6xzvP","outputId":"dadb96d3-5fce-4aa4-ea1a-8e3b2c6a6416"},"outputs":[{"output_type":"stream","name":"stdout","text":["EVALUATION ON TEST DATA\n","22678/22678 [==============================] - 150s 7ms/step - loss: 0.9760 - accuracy: 0.0024 - f1_score: 0.0048 - precision_2: 0.0024 - recall_2: 1.0000\n"]}],"source":["# Evaluate model\n","\n","print(\"EVALUATION ON TEST DATA\")\n","test_loss, test_acc = None, None\n","if MODEL_NO == 0:\n","  test_output = model.evaluate(test_X_bi, test_Y_bi)\n","if MODEL_NO == 1:\n","  test_loss, test_acc = model.evaluate(test_X, test_Y)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a3Zs6pNkyRCq"},"outputs":[],"source":["# Plot!\n","import matplotlib.pyplot as plt\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('model accuracy')\n","plt.figtext(.7, .25, \"train: {:.4f}\".format(history.history['accuracy'][-1]))\n","plt.figtext(.7, .2, \"valid: {:.4f}\".format(history.history['val_accuracy'][-1]))\n","plt.figtext(.7, .3, \"test: {:.4f}\".format(test_acc))\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'valid'], loc='upper left')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N3MdSs4_DhIM"},"outputs":[],"source":["def infer():\n","  pass # TODO , (not urgent for now)"]}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[{"file_id":"1cXWq5R047Tzami7MP9zQO_Rl_B9mYFZM","timestamp":1682862046652}]},"gpuClass":"premium","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"084980ff4a9f4e9d8a274b0d2df69954":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7c3fb068c333479ea64623b2d46b5a36","placeholder":"â€‹","style":"IPY_MODEL_5e52523a68c0427cb226ea602974d2e4","value":"100%"}},"337bf7718632403b9fa1bf81da06c424":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_db7996e725d64e119e2a64bb9cf6610a","max":10000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f5646b547dcc47d6af48a91a76bf52f3","value":10000}},"5e52523a68c0427cb226ea602974d2e4":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7c3fb068c333479ea64623b2d46b5a36":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"80ba7dc2f3e94f36aa57f7f95768fe47":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c2286500dad640a4b8aa2e9c3a8cc7b5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d51477c3d0fc49278aaab65192e54b49","placeholder":"â€‹","style":"IPY_MODEL_80ba7dc2f3e94f36aa57f7f95768fe47","value":" 10000/10000 [00:34&lt;00:00, 291.76it/s]"}},"d51477c3d0fc49278aaab65192e54b49":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"db7996e725d64e119e2a64bb9cf6610a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dca23dc11d3b438cb24d1180c0650499":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_084980ff4a9f4e9d8a274b0d2df69954","IPY_MODEL_337bf7718632403b9fa1bf81da06c424","IPY_MODEL_c2286500dad640a4b8aa2e9c3a8cc7b5"],"layout":"IPY_MODEL_e53595a6db3445719887cc7ffbe022eb"}},"e53595a6db3445719887cc7ffbe022eb":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f5646b547dcc47d6af48a91a76bf52f3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}}}}},"nbformat":4,"nbformat_minor":0}